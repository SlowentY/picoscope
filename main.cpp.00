//2023.11.10 1st picoscope test


#include <stdio.h>

#include <iostream>

/* Headers for Windows */
#ifdef _WIN32
#include "windows.h"
#include <conio.h>
//#include "libps4000a-1.0/ps4000aApi.h"
#include "libps4000a-1.0/ps4000aApi.h"

#ifndef PICO_STATUS
#include <libps4000a-1.0/PicoStatus.h>
#endif

//#include <ps4000aApi.h>
//#include <cinttypes>
//#include <C:\\Program Files\\CodeBlocks\\MinGW\\lib\\gcc\\x86_64-w64-mingw32\\8.1.0\\include\\c++\\cstdint>

#else
#include <sys/types.h>
#include <string.h>
#include <termios.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <ctype.h>


#include <libps4000a-1.0/ps4000aApi.h>
#ifndef PICO_STATUS
#include <libps4000a-1.0/PicoStatus.h>
#endif

#define Sleep(a) usleep(1000*a)
#define scanf_s scanf
#define fscanf_s fscanf
#define memcpy_s(a,b,c,d) memcpy(a,c,d)

typedef enum enBOOL{FALSE,TRUE} BOOL;

/* A function to detect a keyboard press on Linux */
int32_t _getch()
{
        struct termios oldt, newt;
        int32_t ch;
        int32_t bytesWaiting;
        tcgetattr(STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~( ICANON | ECHO );
        tcsetattr(STDIN_FILENO, TCSANOW, &newt);
        setbuf(stdin, NULL);
        do {
                ioctl(STDIN_FILENO, FIONREAD, &bytesWaiting);
                if (bytesWaiting)
                        getchar();
        } while (bytesWaiting);

        ch = getchar();

        tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
        return ch;
}

int32_t _kbhit()
{
        struct termios oldt, newt;
        int32_t bytesWaiting;
        tcgetattr(STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~( ICANON | ECHO );
        tcsetattr(STDIN_FILENO, TCSANOW, &newt);
        setbuf(stdin, NULL);
        ioctl(STDIN_FILENO, FIONREAD, &bytesWaiting);

        tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
        return bytesWaiting;
}

int32_t fopen_s(FILE ** a, const char * b, const char * c)
{
FILE * fp = fopen(b,c);
*a = fp;
return (fp>0)?0:-1;
}

/* A function to get a single character on Linux */
#define max(a,b) ((a) > (b) ? a : b)
#define min(a,b) ((a) < (b) ? a : b)
#endif

using namespace std;

int main()
{
int16_t handle;
uint32_t retval{0};

cout << endl;
cout << "handle = " << handle << endl << endl;


retval = ps4000aOpenUnit(&handle, NULL);

switch (retval)
{

case

PICO_OK :  cout << "retval = " << "PICO_OK" << endl << endl; break;
//0x00000000UL :  cout << "retval = " << "PICO_OK" << endl << endl; break;

default: cout << "unknown retval = " << retval << endl << endl;

}


cout << "retval = " << retval << endl << endl;

ps4000aCloseUnit(handle);

cout << endl;
cout << "handle = " << handle << endl;
cout << endl;

    printf("Hello world!\n");
    return 0;
}
